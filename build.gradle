import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'java'
    id 'io.spring.dependency-management' version '1.1.6'
}

static def getCurrentBranch() {
    def branch = ''
    def proc = 'git rev-parse --abbrev-ref HEAD'.execute()
    proc.in.eachLine { line -> branch = line }
    proc.waitFor()
    return branch
}

print "Current branch: ${getCurrentBranch()}\n"

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    version = getCurrentBranch() == 'main' ? version : (version.split('-')[0] + '-SNAPSHOT')

    repositories {
        mavenCentral()
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(24)
        }
    }

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'
        implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
        implementation 'org.hibernate.validator:hibernate-validator'
        implementation 'com.google.code.gson:gson'
        runtimeOnly 'com.h2database:h2'

        implementation 'commons-io:commons-io:2.20.0'

        implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testImplementation("org.wiremock.integrations:wiremock-spring-boot:3.10.6")
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2025.0.0"
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs.add("-parameters")
    }

}
